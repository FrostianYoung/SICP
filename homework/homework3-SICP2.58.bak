#lang racket

;code start


;code end

    (define (deriv exp var)
      (cond ((number? exp ) 0)
            ((variable? exp)
             (if (same-variable? exp var) 1 0))
            ((sum? exp)
             (make-sum (deriv (addend exp) var)
                       (deriv (augend exp) var)))
            ((product? exp)
             (make-sum 
              (make-product (multiplier exp)
                            (deriv (multiplicand exp) var))
              (make-product (deriv (multiplier exp) var)
                            (multiplicand exp))))
            (else 
             (error "wrong format"))))

    (define (myloop)
      (let ((a (read)))
        (if (eq? a eof)
            (void)
            (begin (display (deriv a 'x)) (newline) (myloop)))))

    (myloop)
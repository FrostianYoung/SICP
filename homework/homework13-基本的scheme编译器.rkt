#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.2 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 10398 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 12 #"racket/mpair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;;;;;;;;;;;;;;;;;;;;****common functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exit"
0 0 24 3 3 #") ("
0 0 14 3 4 #"void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"mtagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"tag"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"mpair?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcar"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"tag"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"tag"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"tag"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"mylist->mlist"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"mpair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 4 #")  ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"mcons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"mylist->mlist"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"mylist->mlist"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"mcons"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 13 #"mylist->mlist"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcar"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"mpair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 4 #")  ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"mcons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"mylist->mlist"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"mylist->mlist"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"mcons"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 13 #"mylist->mlist"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"mymlist->list"
0 0 24 3 1 #" "
0 0 14 3 4 #"mlst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"mlst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"mpair?"
0 0 24 3 1 #" "
0 0 14 3 4 #"mlst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcar"
0 0 24 3 1 #" "
0 0 14 3 4 #"mlst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"mpair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 4 #")  ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"mymlist->list"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"mymlist->list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"mlst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 13 #"mymlist->list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"mlst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"mlst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"mpair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 4 #")  ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"mymlist->list"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"mymlist->list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"mlst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 13 #"mymlist->list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"mlst"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"mcadr"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"mcar"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 9 #"set-mcdr!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"set-car!"
0 0 24 3 1 #" "
0 0 14 3 9 #"set-mcar!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;;;;;;;;;;;;;;;;;;;;;program of basic scheme interpreter"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";functions below needs to be add to the scheme machine's op list, no"
 #"t in basic scheme interpreter"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"make-compiled-procedure"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 18 #"compiled-procedure"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"compiled-procedure?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 18 #"compiled-procedure"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"compiled-procedure-entry"
0 0 24 3 1 #" "
0 0 14 3 6 #"c-proc"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"c-proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"compiled-procedure-env"
0 0 24 3 1 #" "
0 0 14 3 6 #"c-proc"
0 0 24 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 6 #"c-proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"self-evaluating?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         (("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"quoted?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")  ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"quote"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"text-of-quotation"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"assignment?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")  ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"assignment-variable"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"assignment-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")  ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 15 3 11 #"definition?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")  ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 6 #"define"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"let?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")  ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 3 #"let"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"let-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")  ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"let-clauses"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"let->combination"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 11 #"let-clauses"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"let-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 11 #"let-clauses"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 15 3 19 #"definition-variable"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"caadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 15 3 16 #"definition-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"make-lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cdadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 14 #")             "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #")))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"lambda?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 6 #"lambda"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"lambda-parameters"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"lambda-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-lambda"
0 0 24 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 5 #")))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"if?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"if-predicate"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"if-consequent"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"if-alternative"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-if"
0 0 24 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 24 3 1 #" "
0 0 14 3 10 #"consequent"
0 0 24 3 1 #" "
0 0 14 3 11 #"alternative"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 10 #"consequent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 24 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 24 3 1 #" "
0 0 14 3 11 #"alternative"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 24 3 1 #" "
0 0 14 3 10 #"consequent"
0 0 24 3 1 #" "
0 0 14 3 11 #"alternative"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 15 3 6 #"begin?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 15 3 13 #"begin-actions"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"last-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rest-exps"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-begin"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"sequence->exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 2 #") "
0 0 14 3 3 #"seq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 9 #"last-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 3 #") ("
0 0 14 3 9 #"first-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-begin"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"application?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operands"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"no-operands?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"first-operand"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"rest-operands"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cond?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 4 #"cond"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cond-clauses"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"cond-else-clause?"
0 0 24 3 1 #" "
0 0 14 3 6 #"clause"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 24 3 1 #" "
0 0 14 3 6 #"clause"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"else"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 24 3 1 #" "
0 0 14 3 6 #"clause"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"clause"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cond-actions"
0 0 24 3 1 #" "
0 0 14 3 6 #"clause"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"clause"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"expand-clauses"
0 0 24 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 17 #"cond-else-clause?"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"sequence->exp"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cond-actions"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"ELSE clause isn't last -- COND->IF\""
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 7 #"clauses"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"make-if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 13 #"sequence->exp"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cond-actions"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 14 #"expand-clauses"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"cond->if"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"expand-clauses"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cond-clauses"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"list-of-values"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"no-operands?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 13 #"first-operand"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 14 #"list-of-values"
0 0 24 3 2 #" ("
0 0 14 3 13 #"rest-operands"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"eval-if"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"true?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"if-predicate"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 13 #"if-consequent"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 14 #"if-alternative"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"and?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"and"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"eval-and"
0 0 24 3 1 #" "
0 0 14 3 8 #"operands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 6 #"result"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"tmp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"true?"
0 0 24 3 1 #" "
0 0 14 3 3 #"tmp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"tmp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 5 #"false"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 8 #"operands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"or?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"or"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"eval-or"
0 0 24 3 1 #" "
0 0 14 3 8 #"operands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 8 #"operands"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"false"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"true?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"operands"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"true"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"eval-or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"operands"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"eval-sequence"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 9 #"last-exp?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #" )"
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 13 #"eval-sequence"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rest-exps"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-assignment"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-variable-value!"
0 0 24 3 2 #" ("
0 0 14 3 19 #"assignment-variable"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 16 #"assignment-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-definition"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 16 #"define-variable!"
0 0 24 3 2 #" ("
0 0 15 3 19 #"definition-variable"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 15 3 16 #"definition-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"env"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"true?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-procedure"
0 0 24 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"procedure"
0 0 24 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"compound-procedure?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"procedure"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"procedure-parameters"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"list->mlist"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"procedure-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"procedure-environment"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"enclosing-environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 4 #"mcar"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"the-empty-environment"
0 0 24 3 2 #" ("
0 0 14 3 5 #"mlist"
0 0 24 3 4 #" )) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-frame"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"mcons"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"frame-variables"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 4 #" ) ("
0 0 14 3 4 #"mcar"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"frame-values"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 3 #") ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 4 #"))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"add-binding-to-frame!"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"set-car!"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 2 #" ("
0 0 14 3 5 #"mcons"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcar"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 5 #")))  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"set-cdr!"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 2 #" ("
0 0 14 3 5 #"mcons"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 6 #"))))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"lookup-variable-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"env-loop"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"env-loop"
0 0 24 3 2 #" ("
0 0 14 3 21 #"enclosing-environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcar"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"mcar"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 6 #"))))) "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 21 #"the-empty-environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"Unbound variable\""
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"frame"
0 0 24 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"scan"
0 0 24 3 2 #" ("
0 0 14 3 15 #"frame-variables"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 12 #"frame-values"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"env-loop"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"set-variable-value!"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"env-loop"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"env-loop"
0 0 24 3 2 #" ("
0 0 14 3 21 #"enclosing-environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcar"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 4 #"))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"set-car!"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 7 #")))))  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 21 #"the-empty-environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"Unbound variable --SET!\""
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"frame"
0 0 24 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"scan"
0 0 24 3 2 #" ("
0 0 14 3 15 #"frame-variables"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 12 #"frame-values"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"env-loop"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 15 3 16 #"define-variable!"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"frame"
0 0 24 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 21 #"add-binding-to-frame!"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcar"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"set-car!"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 6 #"))))) "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"scan"
0 0 24 3 2 #" ("
0 0 14 3 15 #"frame-variables"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"frame-values"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"my-square"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #" ) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"primitive-procedures"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"mlist"
0 0 24 3 2 #" ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"cons"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"null?"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"pair?"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 3 #"not"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 9 #"remainder"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"my-square"
0 0 24 3 2 #"  "
0 0 14 3 9 #"my-square"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"length"
0 0 24 3 2 #"  "
0 0 14 3 6 #"length"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"sqrt"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sqrt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"list"
0 0 24 3 2 #"  "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"eq?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        )) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 25 #"primitive-procedure-names"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"mmap"
0 0 24 3 1 #" "
0 0 14 3 4 #"mcar"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 20 #"primitive-procedures"
0 0 24 3 4 #"))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 27 #"primitive-procedure-objects"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"mmap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 5 #"mlist"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 14 3 5 #"mcadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 20 #"primitive-procedures"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"extend-environment"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 8 #"base-env"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"mpair?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #" ("
0 0 14 3 11 #"list->mlist"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"void"
0 0 24 3 4 #"))  "
0 0 17 3 33 #";addfor scheme-machine by guo wei"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"mpair?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 2 #" ("
0 0 14 3 11 #"list->mlist"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"void"
0 0 24 3 4 #"))  "
0 0 17 3 51 #";addfor scheme-machine by guo wei ;add for compiler"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 7 #"mlength"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 7 #"mlength"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"mcons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-frame"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #") "
0 0 14 3 8 #"base-env"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"Too many arguments supplied\""
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Too few arguments supplied\""
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"setup-environment"
0 0 24 3 3 #" ) "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"initial-env"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 18 #"extend-environment"
0 0 24 3 2 #" ("
0 0 14 3 25 #"primitive-procedure-names"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 27 #"primitive-procedure-objects"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 14 3 21 #"the-empty-environment"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 16 #"define-variable!"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 11 #"initial-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 16 #"define-variable!"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #" "
0 0 14 3 11 #"initial-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 11 #"initial-env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"primitive-procedure?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"mtagged-list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"primitive"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"primitive-implementation"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 5 #"mcadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"glb-env"
0 0 24 3 2 #" ("
0 0 14 3 17 #"setup-environment"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;;;;;;;;;;;;;;;;;;;;;;;;****basic machine interpreter "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eof?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"eof"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"true"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"false"
0 0 24 3 4 #"))  "
0 0 17 3 15 #";add by guo wei"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-arglist"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"adjoin-arg"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 7 #"arglist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 7 #"arglist"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"last-operand?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"no-more-exps?"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-global-environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 7 #"glb-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"user-print"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 25 #"apply-primitive-procedure"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"apply"
0 0 24 3 2 #" ("
0 0 14 3 24 #"primitive-implementation"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 14 3 4 #"args"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"eceval-operations"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rem"
0 0 24 3 1 #" "
0 0 14 3 9 #"remainder"
0 0 24 3 35 #")                                  "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 16 #"self-evaluating?"
0 0 24 3 1 #" "
0 0 14 3 16 #"self-evaluating?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 9 #"variable?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"quoted?"
0 0 24 3 1 #" "
0 0 14 3 7 #"quoted?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"assignment?"
0 0 24 3 1 #" "
0 0 14 3 11 #"assignment?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 11 #"definition?"
0 0 24 3 1 #" "
0 0 15 3 11 #"definition?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"if?"
0 0 24 3 1 #" "
0 0 14 3 3 #"if?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"lambda?"
0 0 24 3 1 #" "
0 0 14 3 7 #"lambda?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 6 #"begin?"
0 0 24 3 1 #" "
0 0 15 3 6 #"begin?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"application?"
0 0 24 3 1 #" "
0 0 14 3 12 #"application?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 21 #"lookup-variable-value"
0 0 24 3 1 #" "
0 0 14 3 21 #"lookup-variable-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"text-of-quotation"
0 0 24 3 1 #" "
0 0 14 3 17 #"text-of-quotation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"lambda-parameters"
0 0 24 3 1 #" "
0 0 14 3 17 #"lambda-parameters"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"lambda-body"
0 0 24 3 1 #" "
0 0 14 3 11 #"lambda-body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"make-procedure"
0 0 24 3 1 #" "
0 0 14 3 14 #"make-procedure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"operands"
0 0 24 3 1 #" "
0 0 14 3 8 #"operands"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 8 #"operator"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"empty-arglist"
0 0 24 3 1 #" "
0 0 14 3 13 #"empty-arglist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"no-operands?"
0 0 24 3 1 #" "
0 0 14 3 12 #"no-operands?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"first-operand"
0 0 24 3 1 #" "
0 0 14 3 13 #"first-operand"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"last-operand?"
0 0 24 3 1 #" "
0 0 14 3 13 #"last-operand?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"adjoin-arg"
0 0 24 3 1 #" "
0 0 14 3 10 #"adjoin-arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"rest-operands"
0 0 24 3 1 #" "
0 0 14 3 13 #"rest-operands"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 20 #"primitive-procedure?"
0 0 24 3 1 #" "
0 0 14 3 20 #"primitive-procedure?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 19 #"compound-procedure?"
0 0 24 3 1 #" "
0 0 14 3 19 #"compound-procedure?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 25 #"apply-primitive-procedure"
0 0 24 3 1 #" "
0 0 14 3 25 #"apply-primitive-procedure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 20 #"procedure-parameters"
0 0 24 3 1 #" "
0 0 14 3 20 #"procedure-parameters"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 21 #"procedure-environment"
0 0 24 3 1 #" "
0 0 14 3 21 #"procedure-environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"procedure-body"
0 0 24 3 1 #" "
0 0 14 3 14 #"procedure-body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 18 #"extend-environment"
0 0 24 3 1 #" "
0 0 14 3 18 #"extend-environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 13 #"begin-actions"
0 0 24 3 1 #" "
0 0 15 3 13 #"begin-actions"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"first-exp"
0 0 24 3 1 #" "
0 0 14 3 9 #"first-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"last-exp?"
0 0 24 3 1 #" "
0 0 14 3 9 #"last-exp?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"rest-exps"
0 0 24 3 1 #" "
0 0 14 3 9 #"rest-exps"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"no-more-exps?"
0 0 24 3 1 #" "
0 0 14 3 13 #"no-more-exps?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"if-predicate"
0 0 24 3 1 #" "
0 0 14 3 12 #"if-predicate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"true?"
0 0 24 3 1 #" "
0 0 14 3 5 #"true?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"if-alternative"
0 0 24 3 1 #" "
0 0 14 3 14 #"if-alternative"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"if-consequent"
0 0 24 3 1 #" "
0 0 14 3 13 #"if-consequent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 19 #"assignment-variable"
0 0 24 3 1 #" "
0 0 14 3 19 #"assignment-variable"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 16 #"assignment-value"
0 0 24 3 1 #" "
0 0 14 3 16 #"assignment-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 19 #"set-variable-value!"
0 0 24 3 1 #" "
0 0 14 3 19 #"set-variable-value!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 19 #"definition-variable"
0 0 24 3 1 #" "
0 0 15 3 19 #"definition-variable"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 16 #"definition-value"
0 0 24 3 1 #" "
0 0 15 3 16 #"definition-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 16 #"define-variable!"
0 0 24 3 1 #" "
0 0 15 3 16 #"define-variable!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 42 #";(list 'prompt-for-input prompt-for-input)"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 14 3 4 #"read"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 22 #"get-global-environment"
0 0 24 3 1 #" "
0 0 14 3 22 #"get-global-environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 17 3 40 #";(list 'announce-output announce-output)"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"user-print"
0 0 24 3 1 #" "
0 0 14 3 10 #"user-print"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"eof?"
0 0 24 3 1 #" "
0 0 14 3 4 #"eof?"
0 0 24 3 2 #") "
0 0 17 3 15 #";add by guo wei"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-register"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"*unassigned*"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"get"
0 0 24 3 2 #") "
0 0 14 3 8 #"contents"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"set"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"value"
0 0 24 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"Unknown request -- REGISTER\""
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 8 #"dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-contents"
0 0 24 3 1 #" "
0 0 14 3 8 #"register"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"register"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"get"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-contents!"
0 0 24 3 1 #" "
0 0 14 3 8 #"register"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 8 #"register"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"set"
0 0 24 3 2 #") "
0 0 14 3 5 #"value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-stack"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"push"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pop"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"Empty stack -- POP\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"top"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 3 #"top"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"initialize"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"push"
0 0 24 3 2 #") "
0 0 14 3 4 #"push"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pop"
0 0 24 3 3 #") ("
0 0 14 3 3 #"pop"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"initialize"
0 0 24 3 3 #") ("
0 0 14 3 10 #"initialize"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"Unknown request -- STACK\""
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 7 #"message"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 8 #"dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pop"
0 0 24 3 1 #" "
0 0 14 3 5 #"stack"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"stack"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pop"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"push"
0 0 24 3 1 #" "
0 0 14 3 5 #"stack"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 5 #"stack"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"push"
0 0 24 3 2 #") "
0 0 14 3 5 #"value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"get-register-contents"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 13 #"register-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"get-contents"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-register"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 13 #"register-name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"set-register-contents!"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 13 #"register-name"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"set-contents!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-register"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 13 #"register-name"
0 0 24 3 2 #") "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-register"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-name"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"get-register"
0 0 24 3 2 #") "
0 0 14 3 8 #"reg-name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"assemble"
0 0 24 3 1 #" "
0 0 14 3 15 #"controller-text"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"extract-labels"
0 0 24 3 1 #" "
0 0 14 3 15 #"controller-text"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"insts"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"update-insts!"
0 0 24 3 1 #" "
0 0 14 3 5 #"insts"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"insts"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"extract-labels"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 14 3 7 #"receive"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"receive"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"extract-labels"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"insts"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"next-inst"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-inst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"receive"
0 0 24 3 1 #" "
0 0 14 3 5 #"insts"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"make-label-entry"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-inst"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                                "
0 0 14 3 5 #"insts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 14 3 6 #"labels"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"receive"
0 0 24 3 2 #" ("
0 0 14 3 5 #"mcons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"make-instruction"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-inst"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 14 3 5 #"insts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 6 #"labels"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"update-insts!"
0 0 24 3 1 #" "
0 0 14 3 5 #"insts"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"pc"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-register"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"pc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"flag"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-register"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"flag"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"stack"
0 0 24 3 2 #" ("
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"stack"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"ops"
0 0 24 3 2 #" ("
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"operations"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"mfor-each"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"inst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 31 #"set-instruction-execution-proc!"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"inst"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 24 #"make-execution-procedure"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 16 #"instruction-text"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 2 #") "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 4 #"flag"
0 0 24 3 1 #" "
0 0 14 3 5 #"stack"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 5 #"insts"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"make-instruction"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"mcons"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"instruction-text"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"mcar"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 26 #"instruction-execution-proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"mcdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 31 #"set-instruction-execution-proc!"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"set-mcdr!"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"make-label-entry"
0 0 24 3 1 #" "
0 0 14 3 10 #"label-name"
0 0 24 3 1 #" "
0 0 14 3 5 #"insts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 10 #"label-name"
0 0 24 3 1 #" "
0 0 14 3 5 #"insts"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"lookup-label"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 10 #"label-name"
0 0 24 3 4 #")   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 10 #"label-name"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"Undefined label -- ASSEMBLE\""
0 0 24 3 1 #" "
0 0 14 3 10 #"label-name"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"make-execution-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 4 #"flag"
0 0 24 3 1 #" "
0 0 14 3 5 #"stack"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"assign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 11 #"make-assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"test"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-test"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 1 #" "
0 0 14 3 4 #"flag"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"branch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 11 #"make-branch"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 4 #"flag"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"goto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-goto"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"save"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-save"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 5 #"stack"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"restore"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 12 #"make-restore"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 5 #"stack"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"perform"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 12 #"make-perform"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 9 #"displayln"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 3 #"))("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"Unknown instruction type -- ASSEMBLE\""
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 4 #"inst"
0 0 24 3 6 #") ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 12 #"get-register"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 2 #" ("
0 0 14 3 15 #"assign-reg-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 5 #")))  "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"value-exp"
0 0 24 3 2 #" ("
0 0 14 3 16 #"assign-value-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"value-proc"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"operation-exp?"
0 0 24 3 1 #" "
0 0 14 3 9 #"value-exp"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 18 #"make-operation-exp"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 9 #"value-exp"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 18 #"make-primitive-exp"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"value-exp"
0 0 24 3 2 #") "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 6 #"))))  "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 19 #" ()                "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"set-contents!"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 10 #"value-proc"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"advance-pc"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 6 #"))))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"assign-reg-name"
0 0 24 3 1 #" "
0 0 14 3 18 #"assign-instruction"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 18 #"assign-instruction"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"assign-value-exp"
0 0 24 3 1 #" "
0 0 14 3 18 #"assign-instruction"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 18 #"assign-instruction"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"advance-pc"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"set-contents!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcdr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-contents"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 7 #"))))   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-test"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 1 #" "
0 0 14 3 4 #"flag"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"condition"
0 0 24 3 2 #" ("
0 0 14 3 14 #"test-condition"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"operation-exp?"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 14 #"condition-proc"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 18 #"make-operation-exp"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 13 #"set-contents!"
0 0 24 3 1 #" "
0 0 14 3 4 #"flag"
0 0 24 3 2 #" ("
0 0 14 3 14 #"condition-proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"advance-pc"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"Bad TEST instruction -- ASSEMBLE\""
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"test-condition"
0 0 24 3 1 #" "
0 0 14 3 16 #"test-instruction"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 16 #"test-instruction"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-branch"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 4 #"flag"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"dest"
0 0 24 3 2 #" ("
0 0 14 3 11 #"branch-dest"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 10 #"label-exp?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"insts"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"lookup-label"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 2 #" ("
0 0 14 3 15 #"label-exp-label"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-contents"
0 0 24 3 1 #" "
0 0 14 3 4 #"flag"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"set-contents!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 5 #"insts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"advance-pc"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"Bad BRANCH instruction -- ASSEMBLE\""
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"branch-dest"
0 0 24 3 1 #" "
0 0 14 3 18 #"branch-instruction"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 18 #"branch-instruction"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-goto"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"dest"
0 0 24 3 2 #" ("
0 0 14 3 9 #"goto-dest"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 10 #"label-exp?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"insts"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 12 #"lookup-label"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 15 #"label-exp-label"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 13 #"set-contents!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 5 #"insts"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 13 #"register-exp?"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"reg"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 12 #"get-register"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 16 #"register-exp-reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"dest"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 13 #"set-contents!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-contents"
0 0 24 3 1 #" "
0 0 14 3 3 #"reg"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"Bad GOTO instruction -- ASSEMBLE\""
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 4 #"inst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"goto-dest"
0 0 24 3 1 #" "
0 0 14 3 16 #"goto-instruction"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 16 #"goto-instruction"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-save"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 5 #"stack"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"reg"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-register"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 19 #"stack-inst-reg-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"push"
0 0 24 3 1 #" "
0 0 14 3 5 #"stack"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-contents"
0 0 24 3 1 #" "
0 0 14 3 3 #"reg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"advance-pc"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-restore"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 5 #"stack"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"reg"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-register"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 19 #"stack-inst-reg-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"set-contents!"
0 0 24 3 1 #" "
0 0 14 3 3 #"reg"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pop"
0 0 24 3 1 #" "
0 0 14 3 5 #"stack"
0 0 24 3 6 #"))    "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"advance-pc"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"stack-inst-reg-name"
0 0 24 3 1 #" "
0 0 14 3 17 #"stack-instruction"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 17 #"stack-instruction"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-perform"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"action"
0 0 24 3 2 #" ("
0 0 14 3 14 #"perform-action"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"operation-exp?"
0 0 24 3 1 #" "
0 0 14 3 6 #"action"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"action-proc"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 18 #"make-operation-exp"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 6 #"action"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"action-proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"advance-pc"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"Bad PERFORM instruction -- ASSEMBLE\""
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"perform-action"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"make-primitive-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 13 #"constant-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 18 #"constant-exp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 1 #"c"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 10 #"label-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"insts"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 12 #"lookup-label"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 15 #"label-exp-label"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"lambda"
0 0 24 3 4 #" () "
0 0 14 3 5 #"insts"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 13 #"register-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-register"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 16 #"register-exp-reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 12 #"get-contents"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 6 #"))))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"Unknown expression type -- ASSEMBLE\""
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"register-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"reg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"register-exp-reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"constant-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"const"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"constant-exp-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"label-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"label"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"label-exp-label"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"make-operation-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"op"
0 0 24 3 2 #" ("
0 0 14 3 11 #"lookup-prim"
0 0 24 3 2 #" ("
0 0 14 3 16 #"operation-exp-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 10 #"operations"
0 0 24 3 4 #"))  "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"aprocs"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 18 #"make-primitive-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 22 #"operation-exp-operands"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" ()  "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 1 #"p"
0 0 24 3 3 #")) "
0 0 14 3 6 #"aprocs"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"operation-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"op"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"operation-exp-op"
0 0 24 3 1 #" "
0 0 14 3 13 #"operation-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"operation-exp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"operation-exp-operands"
0 0 24 3 1 #" "
0 0 14 3 13 #"operation-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 13 #"operation-exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"lookup-prim"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #" "
0 0 14 3 10 #"operations"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"Unknown operation -- ASSEMBLE\""
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"make-new-machine"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"pc"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-register"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"pc"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"flag"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-register"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"flag"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"stack"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-stack"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 24 #"the-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())) "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"the-ops"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 16 #"initialize-stack"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 5 #"stack"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"initialize"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 14 #"register-table"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"flag"
0 0 24 3 1 #" "
0 0 14 3 4 #"flag"
0 0 24 3 5 #")))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"allocate-register"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 14 #"register-table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"Multiply defined register: \""
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 14 #"register-table"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-register"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 14 #"register-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 14 3 18 #"register-allocated"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lookup-register"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 14 #"register-table"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"Unknown register:\""
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"execute"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"insts"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-contents"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 5 #")))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"insts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 26 #"instruction-execution-proc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mcar"
0 0 24 3 1 #" "
0 0 14 3 5 #"insts"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"execute"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"dispatch"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"start"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 13 #"set-contents!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 24 #"the-instruction-sequence"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"execute"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 28 #"install-instruction-sequence"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"seq"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 24 #"the-instruction-sequence"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 ))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"allocate-register"
0 0 24 3 2 #") "
0 0 14 3 17 #"allocate-register"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"get-register"
0 0 24 3 2 #") "
0 0 14 3 15 #"lookup-register"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 18 #"install-operations"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ops"
0 0 24 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"the-ops"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 7 #"the-ops"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"stack"
0 0 24 3 2 #") "
0 0 14 3 5 #"stack"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"operations"
0 0 24 3 2 #") "
0 0 14 3 7 #"the-ops"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Unknown request -- MACHINE\""
0 0 24 3 1 #" "
0 0 14 3 7 #"message"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 8 #"dispatch"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-machine"
0 0 24 3 1 #" "
0 0 14 3 14 #"register-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 1 #" "
0 0 14 3 15 #"controller-text"
0 0 24 3 1 #")"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"machine"
0 0 24 3 2 #" ("
0 0 14 3 16 #"make-new-machine"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"for-each"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 13 #"register-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"allocate-register"
0 0 24 3 2 #") "
0 0 14 3 13 #"register-name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 14 #"register-names"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 18 #"install-operations"
0 0 24 3 2 #") "
0 0 14 3 3 #"ops"
0 0 24 3 5 #")    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 28 #"install-instruction-sequence"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"assemble"
0 0 24 3 1 #" "
0 0 14 3 15 #"controller-text"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 7 #"machine"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 7 #"machine"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"machine"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"start"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;; your codes start here"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 17 #"eceval-operations"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 17 #"eceval-operations"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 23 #"make-compiled-procedure"
0 0 24 3 1 #" "
0 0 14 3 23 #"make-compiled-procedure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 24 #"compiled-procedure-entry"
0 0 24 3 1 #" "
0 0 14 3 24 #"compiled-procedure-entry"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 22 #"compiled-procedure-env"
0 0 24 3 1 #" "
0 0 14 3 22 #"compiled-procedure-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 19 #"compiled-procedure?"
0 0 24 3 1 #" "
0 0 14 3 19 #"compiled-procedure?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"cons"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; compile main function"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; linkage = 'next, 'return, 'label"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compile"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 16 #"self-evaluating?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 23 #"compile-self-evaluating"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 7 #"quoted?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 14 #"compile-quoted"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 16 #"compile-variable"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 11 #"assignment?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 18 #"compile-assignment"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 15 3 11 #"definition?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 18 #"compile-definition"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"if?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 10 #"compile-if"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 7 #"lambda?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 14 #"compile-lambda"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 15 3 6 #"begin?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 16 #"compile-sequence"
0 0 24 3 2 #" ("
0 0 15 3 13 #"begin-actions"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 5 #"cond?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 7 #"compile"
0 0 24 3 2 #" ("
0 0 14 3 8 #"cond->if"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 12 #"application?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 19 #"compile-application"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"Unknown expression type -- COMPILE\""
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; instruction = (registers-needs registers-maybe-modified assembly-c"
 #"odes)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 14 3 5 #"needs"
0 0 24 3 1 #" "
0 0 14 3 8 #"modifies"
0 0 24 3 1 #" "
0 0 14 3 10 #"statements"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"needs"
0 0 24 3 1 #" "
0 0 14 3 8 #"modifies"
0 0 24 3 1 #" "
0 0 14 3 10 #"statements"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"registers-needed"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"registers-modified"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"needs-register?"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 1 #" "
0 0 14 3 3 #"reg"
0 0 24 3 2 #") "
0 0 17 3 19
#";seq\346\230\257\346\214\207\344\273\244\345\272\217\345\210\227"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 63
#"; memq (member equal) find reg in seq, return '(reg ...) or #f "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"memq"
0 0 24 3 1 #" "
0 0 14 3 3 #"reg"
0 0 24 3 2 #" ("
0 0 14 3 16 #"registers-needed"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"modifies-register?"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 1 #" "
0 0 14 3 3 #"reg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"memq"
0 0 24 3 1 #" "
0 0 14 3 3 #"reg"
0 0 24 3 2 #" ("
0 0 14 3 18 #"registers-modified"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 26 #"empty-instruction-sequence"
0 0 24 3 2 #") "
0 0 17 3 19
(
 #";\347\251\272\347\232\204\346\214"
 #"\207\344\273\244\345\272\217\345\210\227"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 28 #"append-instruction-sequences"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"append-2-sequences"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"list-union"
0 0 24 3 2 #" ("
0 0 14 3 16 #"registers-needed"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"list-difference"
0 0 24 3 2 #" ("
0 0 14 3 16 #"registers-needed"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 24 3 3 #") ("
0 0 14 3 18 #"registers-modified"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"list-union"
0 0 24 3 2 #" ("
0 0 14 3 18 #"registers-modified"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 3 #") ("
0 0 14 3 18 #"registers-modified"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 3 #") ("
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"append-seq-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 26 #"empty-instruction-sequence"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 18 #"append-2-sequences"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 15 #"append-seq-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"append-seq-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 24 3 3 #")) "
0 0 17 3 49
(
 #";seqs\344\270\255\347\232\204\345"
 #"\205\203\347\264\240\344\271\237\345"
 #"\217\257\344\273\245\346\230\257\346\240\207\345\217\267"
 #",\345\246\202'somewhere"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"list-union"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #") "
0 0 17 3 47 #";merge s1 & s2 and remove the repeated elements"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 4 #"memq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 3 #") ("
0 0 14 3 10 #"list-union"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 3 #") ("
0 0 14 3 10 #"list-union"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"list-difference"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #") "
0 0 17 3 40 #";remove elements which are in s2 from s1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 4 #"memq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"list-difference"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 3 #") ("
0 0 14 3 15 #"list-difference"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"preserving"
0 0 24 3 1 #" "
0 0 14 3 4 #"regs"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 24 3 2 #") "
0 0 17 3 53
(
 #";regs\346\230\257\345\217\257\350"
 #"\203\275\351\234\200\350\246\201\344\277"
 #"\235\345\255\230\345\210\260\346\240\210\351\207\214\347\232"
 #"\204\345\257\204\345\255\230\345\231\250\351\233\206\345\220\210"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"regs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 28 #"append-instruction-sequences"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"first-reg"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"regs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 15 #"needs-register?"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 24 3 1 #" "
0 0 14 3 9 #"first-reg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 18 #"modifies-register?"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 1 #" "
0 0 14 3 9 #"first-reg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"preserving"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"regs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 10 #"list-union"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"first-reg"
0 0 24 3 3 #") ("
0 0 14 3 16 #"registers-needed"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 15 #"list-difference"
0 0 24 3 2 #" ("
0 0 14 3 18 #"registers-modified"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"first-reg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 9 #"first-reg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 17 3 70
(
 #"; ,first-reg\350\241\250\347\244\272\345\257\271\350\241\250\350"
 #"\276\276\345\274\217first-reg\346\261\202\345\200\274\347\232"
 #"\204\347\273\223\346\236\234,Rac"
 #"ket\344\270\215\346\224\257\346\214\201"
) 0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 9 #"first-reg"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 4 #"seq2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"preserving"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"regs"
0 0 24 3 2 #") "
0 0 14 3 4 #"seq1"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"compile-self-evaluating"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"end-with-linkage"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #" "
0 0 17 3 57
(
 #"; end-with-linkage \345\244\204\347\220\206"
 #"\345\220\216\347\273\255\345\246\202\344\275\225\346\211\247\350"
 #"\241\214(\350\277\236\346\216\245\344\273\243\347\240\201)"
) 0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                               "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"exp"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"compile-quoted"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"end-with-linkage"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                               "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 17 #"text-of-quotation"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"compile-variable"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"end-with-linkage"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                               "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 21 #"lookup-variable-value"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"end-with-linkage"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #" "
0 0 14 3 20 #"instruction-sequence"
0 0 24 3 2 #") "
0 0 17 3 25
(
 #";\350\277\224\345\233\236\344\270\200\344\270"
 #"\252\346\214\207\344\273\244\345\272\217\345\210\227"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"preserving"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"continue"
0 0 24 3 2 #") "
0 0 17 3 99
(
 #";\351\234\200\350\246\201\345\205\263\346\263"
 #"\250coutinue\346\230\257"
 #"\345\220\246\345\217\257\350\203\275\350\242\253instruction-s"
 #"equence\344\277\256\346\224"
 #"\271\344\270\224\345\234\250\347\254"
 #"\254\344\272\214\344\270\252\346\214\207\344\273\244\345"
 #"\272\217\345\210\227\344\270\255\347\224\250\345\210\260 "
) 0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 20 #"instruction-sequence"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 15 #"compile-linkage"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"compile-linkage"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 2 #") "
0 0 17 3 46
(
 #";\347\224\237\346\210\220\351\223\276\346"
 #"\216\245\345\220\216\347\273\255\346\211\247\350\241\214\344\273\243"
 #"\347\240\201\347\232\204\346\214\207"
 #"\344\273\244\345\210\227\350\241\250"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"continue"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 26 #"empty-instruction-sequence"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"linkage"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"compile-definition"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 15 3 19 #"definition-variable"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 14 #"get-value-code"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compile"
0 0 24 3 2 #" ("
0 0 15 3 16 #"definition-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"next"
0 0 24 3 4 #"))) "
0 0 17 3 89
(
 #"; \345\217\230\351\207\217\345\200\274\346"
 #"\261\202\345\207\272\345\220\216\346\224\276\345"
 #"\205\245val,\346\216\245\344\270\213"
 #"\346\235\245\347\224\250val\345\200\274"
 #"\345\257\271\345\217\230\351\207\217\345"
 #"\220\215\350\265\213\345\200\274,\345\233\240\346\255\244"
 #"linkage\346\230\257 'next"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"end-with-linkage"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 2 #" ("
0 0 14 3 10 #"preserving"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 17 3 56
(
 #";env\345\217\257\350\203\275\345\234\250get-value-co"
 #"de\344\270\255\350\242\253\344\277\256\346\224\271\343"
 #"\200\202\344\270\272\344\275\225\346\262\241 val?"
) 0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 14 3 14 #"get-value-code"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 70
(
 #"                                                                    "
 #" ("
) 0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 69
(
 #"                                                                    "
 #" "
) 0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 15 3 16 #"define-variable!"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 17 3 10 #";\345\217\230\351\207\217\345\220\215"
0 0 24 29 1 #"\n"
0 0 24 3 81
(
 #"                                                                    "
 #"            ("
) 0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 17 3 10 #";\345\217\230\351\207\217\345\200\274"
0 0 24 29 1 #"\n"
0 0 24 3 81
(
 #"                                                                    "
 #"            ("
) 0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 17 3 19
(
 #";\345\217\230\351\207\217\346\211"
 #"\200\345\234\250\347\216\257\345\242\203"
) 0 0 24 29 1 #"\n"
0 0 24 3 72
(
 #"                                                                    "
 #"   ("
) 0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 14 3 2 #"ok"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"compile-assignment"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 19 #"assignment-variable"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 14 #"get-value-code"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compile"
0 0 24 3 2 #" ("
0 0 14 3 16 #"assignment-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"next"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"end-with-linkage"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 10 #"preserving"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 14 #"get-value-code"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 19 #"set-variable-value!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 98
(
 #"                                                                    "
 #"                             ("
) 0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 17 3 10 #";\345\217\230\351\207\217\345\220\215"
0 0 24 29 1 #"\n"
0 0 24 3 98
(
 #"                                                                    "
 #"                             ("
) 0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 17 3 10 #";\345\217\230\351\207\217\345\200\274"
0 0 24 29 1 #"\n"
0 0 24 3 98
(
 #"                                                                    "
 #"                             ("
) 0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 17 3 19
(
 #";\345\217\230\351\207\217\346\211"
 #"\200\345\234\250\347\216\257\345\242\203"
) 0 0 24 29 1 #"\n"
0 0 24 3 89
(
 #"                                                                    "
 #"                    ("
) 0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 14 3 2 #"ok"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"compile-if"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"t-branch"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"true-branch"
0 0 24 3 3 #")) "
0 0 17 3 32
(
 #";make-label\347\224\237\346\210"
 #"\220\346\227\240\351\207\215\345\244\215\346\240\207\345\217\267"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"f-branch"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"false-branch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"after-if"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"after-if"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 18 #"consequent-linkage"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"next"
0 0 24 3 2 #") "
0 0 14 3 8 #"after-if"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"p-code"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compile"
0 0 24 3 2 #" ("
0 0 14 3 12 #"if-predicate"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"next"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"c-code"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compile"
0 0 24 3 2 #" ("
0 0 14 3 13 #"if-consequent"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 18 #"consequent-linkage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"a-code"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compile"
0 0 24 3 2 #" ("
0 0 14 3 14 #"if-alternative"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"preserving"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #") "
0 0 14 3 6 #"p-code"
0 0 24 3 2 #" ("
0 0 14 3 28 #"append-instruction-sequences"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 71
(
 #"                                                                    "
 #"   "
) 0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 71
(
 #"                                                                    "
 #"   "
) 0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 6 #"false?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"f-branch"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 30 #"parallel-instruction-sequences"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 28 #"append-instruction-sequences"
0 0 24 3 1 #" "
0 0 14 3 8 #"t-branch"
0 0 24 3 1 #" "
0 0 14 3 6 #"c-code"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 28 #"append-instruction-sequences"
0 0 24 3 1 #" "
0 0 14 3 8 #"f-branch"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-code"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                            "
0 0 14 3 8 #"after-if"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 30 #"parallel-instruction-sequences"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"list-union"
0 0 24 3 2 #" ("
0 0 14 3 16 #"registers-needed"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 3 #") ("
0 0 14 3 16 #"registers-needed"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"list-union"
0 0 24 3 2 #" ("
0 0 14 3 18 #"registers-modified"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 3 #") ("
0 0 14 3 18 #"registers-modified"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 24 3 3 #") ("
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"label-counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"new-label-number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 13 #"label-counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 13 #"label-counter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 13 #"label-counter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"string->symbol"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 16 #"new-label-number"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"compile-sequence"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"last-exp?"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"compile"
0 0 24 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 2 #") "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"preserving"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #") "
0 0 17 3 17 #";\344\270\272\344\275\225\344\270\215\350\246\201val?"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 7 #"compile"
0 0 24 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 2 #") "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 16 #"compile-sequence"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rest-exps"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 2 #") "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"compile-lambda"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #")"
0 0 17 3 22
#";exp\346\230\257lambda\350\241\250\350\276\276\345\274\217"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"proc-entry"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"after-lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"after-lambda"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 14 #"lambda-linkage"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"next"
0 0 24 3 2 #") "
0 0 14 3 12 #"after-lambda"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 28 #"append-instruction-sequences"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 28 #"tack-on-instruction-sequence"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 16 #"end-with-linkage"
0 0 24 3 1 #" "
0 0 14 3 14 #"lambda-linkage"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                     "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 23 #"make-compiled-procedure"
0 0 24 3 3 #") ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"proc-entry"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 19 #"compile-lambda-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 10 #"proc-entry"
0 0 24 3 3 #")) "
0 0 14 3 12 #"after-lambda"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 28 #"tack-on-instruction-sequence"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 1 #" "
0 0 14 3 8 #"body-seq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 2 #" ("
0 0 14 3 16 #"registers-needed"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 18 #"registers-modified"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 3 #"seq"
0 0 24 3 3 #") ("
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 8 #"body-seq"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"compile-lambda-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 10 #"proc-entry"
0 0 24 3 2 #") "
0 0 17 3 23
#";proc-entry\346\230\257\344\270\252\346\240\207\345\217\267"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"formals"
0 0 24 3 2 #" ("
0 0 14 3 17 #"lambda-parameters"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 28 #"append-instruction-sequences"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 17 3 95
(
 #";\345\207\275\346\225\260\344\275\223\347\232"
 #"\204\344\273\243\347\240\201\350\246\201\346\261"
 #"\202\346\211\247\350\241\214\345\211\215en"
 #"v\346\224\276\347\235\200\347\216\257\345\242"
 #"\203,proc\346\224\276\347\235"
 #"\200\350\257\221\345\220\216\350\277\207\347\250\213,argl"
 #"\346\224\276\347\235\200\345\256\236"
 #"\345\217\202\345\200\274\350\241\250"
) 0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 10 #"proc-entry"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 22 #"compiled-procedure-env"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 18 #"extend-environment"
0 0 24 3 3 #") ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"formals"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 16 #"compile-sequence"
0 0 24 3 2 #" ("
0 0 14 3 11 #"lambda-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"return"
0 0 24 3 5 #")))) "
0 0 17 3 119
(
 #";\346\225\264\344\270\252\347\250\213\345\272"
 #"\217\344\270\255\345\224\257\344\270\200\344\275"
 #"\277\347\224\250 'return \344\275\234\344\270\272linkag"
 #"e\345\217\202\346\225\260\347\232\204\345\234"
 #"\260\346\226\271 ;\345\207\275\346\225\260"
 #"\344\275\223\346\211\247\350\241\214\347\273"
 #"\223\346\235\237\344\270\200\345\256\232\346\230\257 (go"
 #"to (reg continue))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"compile-application"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"proc-code"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compile"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"next"
0 0 24 3 3 #")) "
0 0 17 3 84
(
 #";\346\225\264\344\270\252\347\250\213\345\272"
 #"\217\344\270\255,\345\224\257\344\270\200 "
 #"target\344\270\215\346\230\257 val \347\232\204\345\234\260\346\226"
 #"\271\343\200\202proc\347\224\250\346\235\245\346\224\276"
 #"\342\200\234\350\257\221\345\220\216"
 #"\350\277\207\347\250\213\342\200\235"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"operand-codes"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"operand"
0 0 24 3 3 #") ("
0 0 14 3 7 #"compile"
0 0 24 3 1 #" "
0 0 14 3 7 #"operand"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"next"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"operands"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"preserving"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #")"
0 0 17 3 39
(
 #";\346\261\202\345\200\274\350\277"
 #"\220\347\256\227\347\254\246\344\274\232\346\224\271\345\217"
 #"\230env\345\222\214continue"
) 0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 9 #"proc-code"
0 0 24 3 2 #" ("
0 0 14 3 10 #"preserving"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 3 #") ("
0 0 14 3 17 #"construct-arglist"
0 0 24 3 1 #" "
0 0 14 3 13 #"operand-codes"
0 0 24 3 3 #") ("
0 0 14 3 22 #"compile-procedure-call"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 119
(
 #"; construct-arglist \347\224\237\346\210"
 #"\220\346\236\204\351\200\240\345\256\236\345\217"
 #"\202\350\241\250\347\232\204\344\273\243\347\240\201 compile-pro"
 #"cedure-call \347\224\237\346\210\220\350\260\203\347\224\250\350"
 #"\277\207\347\250\213\347\232\204\344\273\243\347\240\201\347\273"
 #"\204\345\220\210\345\274\217\347\232\204\347\274\226\350\257\221"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"construct-arglist"
0 0 24 3 1 #" "
0 0 14 3 13 #"operand-codes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 81
(
 #";operand-codes\346\230\257\344\270\252\345\210\227\350\241"
 #"\250,\346\257\217\344\270\252\345\205\203\347"
 #"\264\240\351\203\275\346\230\257\345\257\271"
 #"\344\270\200\344\270\252\345\217\202\346\225\260\346\261\202\345"
 #"\200\274\347\232\204\346\214\207\344\273\244\345\272\217\345\210\227"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 13 #"operand-codes"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 13 #"operand-codes"
0 0 24 3 4 #"))) "
0 0 17 3 10 #";\345\200\222\350\277\207\346\235\245"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 13 #"operand-codes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"argl"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 7 #" ()))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 20 #"code-to-get-last-arg"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 28 #"append-instruction-sequences"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"operand-codes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"argl"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 13 #"operand-codes"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 20 #"code-to-get-last-arg"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"preserving"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 20 #"code-to-get-last-arg"
0 0 24 3 2 #" ("
0 0 14 3 21 #"code-to-get-rest-args"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 13 #"operand-codes"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"code-to-get-rest-args"
0 0 24 3 1 #" "
0 0 14 3 13 #"operand-codes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 17 #"code-for-next-arg"
0 0 24 3 2 #" ("
0 0 14 3 10 #"preserving"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"argl"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"operand-codes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"argl"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"cons"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 13 #"operand-codes"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 17 #"code-for-next-arg"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"preserving"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 17 #"code-for-next-arg"
0 0 24 3 2 #" ("
0 0 14 3 21 #"code-to-get-rest-args"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 13 #"operand-codes"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"compile-procedure-call"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 2 #") "
0 0 17 3 32
#";\344\273\205\350\242\253compile-application\350\260\203\347\224\250"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 16 #"primitive-branch"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 16 #"primitive-branch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 15 #"compiled-branch"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"compiled-branch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"after-call"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"after-call"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 16 #"compiled-linkage"
0 0 24 3 1 #" "
0 0 17 3 58
(
 #";\344\275\277\345\276\227\350\260\203\347\224\250compile-proc"
 #"-appl\346\227\266,linkage"
 #"\344\270\215\345\217\257\350\203\275\344\270\272'next"
) 0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"next"
0 0 24 3 2 #") "
0 0 14 3 10 #"after-call"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 28 #"append-instruction-sequences"
0 0 24 3 1 #" "
0 0 17 3 52
(
 #";\344\270\215\347\224\250\350\200\203\350\231"
 #"\221\345\257\204\345\255\230\345\231\250"
 #"\345\207\272\345\205\245\346\240\210\347\232\204\346\214\207"
 #"\344\273\244\345\272\217\345\210\227\346\213\274\346\216\245"
) 0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 20 #"primitive-procedure?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 16 #"primitive-branch"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 30 #"parallel-instruction-sequences"
0 0 24 3 1 #" "
0 0 17 3 44
(
 #";\344\270\244\344\270\252\346\214\207\344"
 #"\273\244\345\272\217\345\210\227\346\213\274\346\216\245,\345"
 #"\217\252\344\274\232\346\211\247\350\241\214\344\270\200\344\270\252"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 28 #"append-instruction-sequences"
0 0 24 3 1 #" "
0 0 14 3 15 #"compiled-branch"
0 0 24 3 2 #" ("
0 0 14 3 17 #"compile-proc-appl"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 16 #"compiled-linkage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 217
(
 #";compile-proc-appl\347\224\237\346\210\220\350"
 #"\260\203\347\224\250\345\244\215\345\220\210\345"
 #"\207\275\346\225\260\347\232\204\346\214\207\344"
 #"\273\244\343\200\202\347\224\250compiled-linkage\350"
 #"\200\214\351\235\236linkage"
 #"\346\230\257\345\233\240\344\270\272\345\246\202"
 #"\346\236\234linkage\344\270\272'next,\345\210\231\350\260\203"
 #"\347\224\250\345\244\215\345\220\210\345\207\275"
 #"\346\225\260\347\232\204\344\273\243\347\240\201"
 #"\346\211\247\350\241\214\345\256\214\345\220\216"
 #",\345\272\224\350\257\245\350\267\263\350\277"
 #"\207\350\260\203\347\224\250\345\237\272\346"
 #"\234\254\345\207\275\346\225\260\347\232\204\344\273\243\347\240\201"
 #",\350\275\254\345\210\260after-call."
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 28 #"append-instruction-sequences"
0 0 24 3 1 #" "
0 0 14 3 16 #"primitive-branch"
0 0 24 3 2 #" ("
0 0 14 3 16 #"end-with-linkage"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 29 1 #"\n"
0 0 24 3 74
(
 #"                                                                    "
 #"     ("
) 0 0 14 3 25 #"make-instruction-sequence"
0 0 24 29 1 #"\n"
0 0 24 3 74
(
 #"                                                                    "
 #"      "
) 0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 75
(
 #"                                                                    "
 #"      ("
) 0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 74
(
 #"                                                                    "
 #"      "
) 0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 25 #"apply-primitive-procedure"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 10 #"after-call"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"compile-proc-appl"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #")"
0 0 17 3 26
#"; linkage\344\270\215\345\217\257\350\203\275\346\230\257'next"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"return"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 14 3 8 #"all-regs"
0 0 24 3 1 #" "
0 0 17 3 31
(
 #";\346\211\200\346\234\211\345\257\204\345\255\230\345\231"
 #"\250\351\203\275\345\217\257\350\203\275\344\277\256\346\224\271"
) 0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"linkage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 24 #"compiled-procedure-entry"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 8 #"))))) (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"val"
0 0 24 3 3 #")) "
0 0 17 3 22 #";\346\255\244\346\227\266target\346\230\257 'proc"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"return"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"proc-return"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-label"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"proc-return"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                             ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 88
(
 #"                                                                    "
 #"                    "
) 0 0 14 3 8 #"all-regs"
0 0 24 29 1 #"\n"
0 0 24 3 88
(
 #"                                                                    "
 #"                    "
) 0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 11 #"proc-return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 91
(
 #"                                                                    "
 #"                      ("
) 0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 24 #"compiled-procedure-entry"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 91
(
 #"                                                                    "
 #"                      ("
) 0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")) "
0 0 28 3 1 #","
0 0 14 3 11 #"proc-return"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 91
(
 #"                                                                    "
 #"                      ("
) 0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"linkage"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                          (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                           ("
0 0 14 3 25 #"make-instruction-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 86
(
 #"                                                                    "
 #"                  "
) 0 0 14 3 8 #"all-regs"
0 0 24 29 1 #"\n"
0 0 24 3 86
(
 #"                                                                    "
 #"                  "
) 0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 24 #"compiled-procedure-entry"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 97
(
 #"                                                                    "
 #"                            ("
) 0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 89
(
 #"                                                                    "
 #"                    ("
) 0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                          (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"linkage"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                           ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 43 #"\"return linkage, target not val -- COMPILE\""
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"scheme-machine-controller"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 14 #"externel-entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 20 #"read-eval-print-loop"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 16 #"initialize-stack"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 9 #";(perform"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 52 #";(op prompt-for-input) (const \";;; EC-Eval input:\"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"read"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 22 #"get-global-environment"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 12 #"print-result"
0 0 24 3 4 #"))  "
0 0 17 3 98
(
 #";before doing somthing that may change the return address, always as"
 #"sign continue with right label"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 13 #"eval-dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 12 #"print-result"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";  (perform"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";   (op announce-output) (const \";;; EC-Eval value:\"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 10 #"user-print"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")) "
0 0 17 3 34 #";the value of exp is stored in val"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 20 #"read-eval-print-loop"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 13 #"eval-dispatch"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";after this is completed, the value of exp is stored in reg val,and "
0 0 24 29 1 #"\n"
0 0 17 3 49 #";program goto the address stored in reg continue;"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; eval value of exp in env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"eof?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")) "
0 0 17 3 14 #";addby guo wei"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 11 #"program-end"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 16 #"self-evaluating?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 12 #"ev-self-eval"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 9 #"variable?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))  "
0 0 17 3 41 #";assign exp to val and then goto continue"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 11 #"ev-variable"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 7 #"quoted?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 9 #"ev-quoted"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 11 #"assignment?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 13 #"ev-assignment"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 15 3 11 #"definition?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 13 #"ev-definition"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 3 #"if?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 5 #"ev-if"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 7 #"lambda?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 9 #"ev-lambda"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 15 3 6 #"begin?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 8 #"ev-begin"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 12 #"application?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 14 #"ev-application"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 23 #"unknown-expression-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 12 #"ev-self-eval"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 11 #"ev-variable"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 21 #"lookup-variable-value"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 9 #"ev-quoted"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 17 #"text-of-quotation"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 9 #"ev-lambda"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 17 #"lambda-parameters"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 11 #"lambda-body"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 14 #"make-procedure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";just store the value of exp in reg val,and goto continue"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";the value of a lambda is a function object, and it is stored also i"
 #"n val "
) 0 0 24 29 1 #"\n"
0 0 14 3 13 #"ev-assignment"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 19 #"assignment-variable"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 20 #")                   "
0 0 17 3 25 #"; save variable for later"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 16 #"assignment-value"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 15 #"ev-assignment-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 13 #"eval-dispatch"
0 0 24 3 4 #"))  "
0 0 17 3 45 #"; evaluate the assignment value stored in exp"
0 0 24 29 1 #"\n"
0 0 14 3 15 #"ev-assignment-1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"perform"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 19 #"set-variable-value!"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 17 3 32 #";variable name is stored in uenv"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 14 3 2 #"ok"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 13 #"ev-definition"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 15 3 19 #"definition-variable"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 20 #")                   "
0 0 17 3 25 #"; save variable for later"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 15 3 16 #"definition-value"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 15 #"ev-definition-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 13 #"eval-dispatch"
0 0 24 3 4 #"))  "
0 0 17 3 31 #"; evaluate the definition value"
0 0 24 29 1 #"\n"
0 0 14 3 15 #"ev-definition-1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"perform"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 15 3 16 #"define-variable!"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 14 3 2 #"ok"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 5 #"ev-if"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 21 #")                    "
0 0 17 3 40 #"; save the whole if expression for later"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #") "
0 0 17 3 33 #";after ev-if,should goto continue"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 12 #"ev-if-decide"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 12 #"if-predicate"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 13 #"eval-dispatch"
0 0 24 3 4 #"))  "
0 0 17 3 26 #"; evaluate the predicate  "
0 0 24 29 1 #"\n"
0 0 14 3 12 #"ev-if-decide"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #") "
0 0 17 3 64
#";the address to which we should go after the whole ev-if is done"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")  "
0 0 17 3 29 #";the env for the whole if exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")  "
0 0 17 3 17 #";the whole if exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 5 #"true?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 16 #"ev-if-consequent"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 17 #"ev-if-alternative"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 14 #"if-alternative"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 13 #"eval-dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 16 #"ev-if-consequent"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 13 #"if-consequent"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 13 #"eval-dispatch"
0 0 24 3 4 #"))  "
0 0 24 29 1 #"\n"
0 0 14 3 8 #"ev-begin"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 15 3 13 #"begin-actions"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 11 #"ev-sequence"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 11 #"ev-sequence"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 13 #"no-more-exps?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 15 #"ev-sequence-end"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 9 #"first-exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 20 #"ev-sequence-continue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 13 #"eval-dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 20 #"ev-sequence-continue"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 9 #"rest-exps"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 11 #"ev-sequence"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 15 #"ev-sequence-end"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 4 #"))  "
0 0 24 29 1 #"\n"
0 0 14 3 14 #"ev-application"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 8 #"operands"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 8 #"operator"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 20 #"ev-appl-did-operator"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 13 #"eval-dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 20 #"ev-appl-did-operator"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 19 #")                  "
0 0 17 3 14 #"; the operands"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 13 #"empty-arglist"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 11 #"))         "
0 0 17 3 35 #"; the operator,is a function object"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 12 #"no-operands?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 14 #"apply-dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 20 #"ev-appl-operand-loop"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 13 #"first-operand"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 13 #"last-operand?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 16 #"ev-appl-last-arg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"save"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #") "
0 0 17 3 82
(
 #";the oprands, in which the first one is going to be evaluated and ca"
 #"n be discarded"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 22 #"ev-appl-accumulate-arg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 13 #"eval-dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 22 #"ev-appl-accumulate-arg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 3 #")  "
0 0 17 3 54 #";operands, in which the fisrt one is already evaluated"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 10 #"adjoin-arg"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 13 #"rest-operands"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 20 #"ev-appl-operand-loop"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 16 #"ev-appl-last-arg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 22 #"ev-appl-accum-last-arg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 13 #"eval-dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 22 #"ev-appl-accum-last-arg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 10 #"adjoin-arg"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 14 #"apply-dispatch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 14 #"apply-dispatch"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 20 #"primitive-procedure?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 15 #"primitive-apply"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 19 #"compound-procedure?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 4 #"))  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 14 #"compound-apply"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 19 #"compiled-procedure?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 14 #"compiled-apply"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 22 #"unknown-procedure-type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 14 #"compiled-apply"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 24 #"compiled-procedure-entry"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 15 #"primitive-apply"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 25 #"apply-primitive-procedure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 14 #"compound-apply"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 20 #"procedure-parameters"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 21 #"procedure-environment"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 18 #"extend-environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 14 #"procedure-body"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 11 #"ev-sequence"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 14 #"externel-entry"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 16 #"initialize-stack"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 22 #"get-global-environment"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 12 #"print-result"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 23 #"unknown-expression-type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 14 3 29 #"unknown-expression-type-error"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 12 #"signal-error"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 22 #"unknown-procedure-type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"restore"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 5 #")    "
0 0 17 3 38 #"; clean up stack (from apply-dispatch)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 14 3 28 #"unknown-procedure-type-error"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 12 #"signal-error"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 12 #"signal-error"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"perform"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 10 #"user-print"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"goto"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 20 #"read-eval-print-loop"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 14 3 11 #"program-end"
0 0 24 3 1 #" "
0 0 17 3 33 #";addfor scheme-machine by guo wei"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #")  "
0 0 17 3 33 #";end of scheme-machine-controller"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"all-regs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";code end"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"scheme-machine"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"make-machine"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"argl"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 4 #"unev"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 17 #"eceval-operations"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 25 #"scheme-machine-controller"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"compile-and-go"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 12 #"instructions"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"assemble"
0 0 24 3 2 #" ("
0 0 14 3 10 #"statements"
0 0 24 3 2 #"  "
0 0 17 3 153
(
 #";assemble\347\224\261"
 #"\346\226\207\346\234\254\345\275\242\345\274\217"
 #"\347\232\204\346\214\207\344\273\244\345\210\227"
 #"\350\241\250\347\224\237\346\210\220sch"
 #"eme\346\234\272\345\231\250\347\232\204"
 #"\346\214\207\344\273\244\345\210\227\350\241\250"
 #"(\345\270\246\345\217\257\346\211\247\350\241"
 #"\214\350\277\207\347\250\213\347\232\204\346\214"
 #"\207\344\273\244\347\232\204\345\210\227\350\241"
 #"\250,\350\257\245\345\217\257\346\211\247"
 #"\350\241\214\350\277\207\347\250\213\346\230\257schem"
 #"e\345\217\257\346\211\247\350\241\214\350\277\207\347\250\213)"
) 0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 7 #"compile"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 14 #"scheme-machine"
0 0 24 3 4 #"))) "
0 0 17 3 25
#";eceval\346\230\257\344\270\252scheme\346\234\272\345\231\250"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 22 #"set-register-contents!"
0 0 24 3 1 #" "
0 0 14 3 14 #"scheme-machine"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 12 #"instructions"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 22 #"set-register-contents!"
0 0 24 3 1 #" "
0 0 14 3 14 #"scheme-machine"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"flag"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 14 #"scheme-machine"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 46
(
 #";val\346\224\276\347\235\200\347"
 #"\274\226\350\257\221\345\207\272\346\235\245\347\232\204\344\273\243"
 #"\347\240\201\347\232\204\350\265\267"
 #"\345\247\213\345\234\260\345\235\200"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #";return\344\277\235\350\257"
 #"\201\347\274\226\350\257\221\345\207\272\346\235"
 #"\245\347\232\204\344\273\243\347\240\201"
 #"\346\234\200\345\220\216\346\230\257 (goto (reg continue))"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"compile-and-go"
0 0 24 3 2 #" ("
0 0 14 3 4 #"read"
0 0 24 3 2 #"))"
0           0
